-- create table
--   public.users (
--     id bigint generated by default as identity not null,
--     first_name text not null default ''::text,
--     second_name text not null default ''::text,
--     pw_hash text not null default ''::text,
--     email text not null default ''::text,
--     phone_number text null,
--     created_at timestamp with time zone not null default now(),
--     last_access_at timestamp with time zone null,
--     role text not null default 'user'::text,
--     constraint users_pkey primary key (id),
--     constraint users_email_key unique (email),
--     constraint users_phone_number_key unique (phone_number),
--     constraint users_role_key unique (role)
--   ) tablespace pg_default;

-- Drop the existing tickets table if it exists
drop table if exists public.tickets;

-- Recreate the tickets table with UUID user_id
create table
  public.tickets (
    id bigint generated by default as identity not null,
    title text not null,
    description text not null,
    user_id uuid not null references auth.users(id), -- Changed to UUID and referencing auth.users
    status text not null default 'pending'::text,
    created_at timestamp with time zone not null default now(),
    updated_at timestamp with time zone not null default now(),
    constraint tickets_pkey primary key (id)
  ) tablespace pg_default;

-- Create a new table to map users to their roles
create table public.user_roles (
    user_id uuid references auth.users(id) on delete cascade,
    role text not null,
    constraint user_roles_pkey primary key (user_id)
) tablespace pg_default;

-- Create a new table to log user activities
create table public.user_activity_logs (
    id bigint generated by default as identity not null,
    user_id uuid not null references auth.users(id) on delete cascade,
    activity text not null,
    type text not null, -- New field for type
    timestamp timestamp with time zone not null default now(),
    constraint user_activity_logs_pkey primary key (id)
) tablespace pg_default;



-- DID Documents table: Map DIDs to their metadata
create table
  public.did_documents (
    id uuid default gen_random_uuid() primary key,
    user_id uuid not null references auth.users(id) on delete cascade, -- Reference to Supabase auth.users
    did text not null unique, -- Unique Decentralized Identifier
    ipfs_cid text not null, -- IPFS CID for the DID document
    acc_value text not null, -- RSA accumulator value
    public_key text not null, -- Public key associated with the DID
    created_at timestamp with time zone not null default now(),
    updated_at timestamp with time zone not null default now()
  ) tablespace pg_default;

-- Verifiable Credentials (VC) table: Store VCs issued to users
create table
  public.verifiable_credentials (
    id bigint generated by default as identity primary key,
    did text not null references public.did_documents(did) on delete cascade,
    vc_hash text not null unique, -- Hash of the Verifiable Credential
    ipfs_cid text not null, -- IPFS CID for the VC JSON document
    issued_at timestamp with time zone not null default now()
  ) tablespace pg_default;

-- Accumulator State table: Track RSA accumulator states
create table
  public.accumulator_state (
    id bigint generated by default as identity primary key,
    current_value text not null, -- Current RSA accumulator value
    previous_value text, -- Previous accumulator value for traceability
    updated_at timestamp with time zone not null default now()
  ) tablespace pg_default;

-- Activity logs for DID and VC interactions
create table
  public.did_activity_logs (
    id bigint generated by default as identity primary key,
    did text not null references public.did_documents(did) on delete cascade,
    activity text not null, -- Description of the activity
    timestamp timestamp with time zone not null default now()
  ) tablespace pg_default;

  CREATE TABLE IF NOT EXISTS user_keys (
    user_id UUID PRIMARY KEY,
    email varchar,
    two_factor_auth BOOLEAN DEFAULT FALSE,
    private_key TEXT NOT NULL,
    public_key TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) tablespace pg_default;